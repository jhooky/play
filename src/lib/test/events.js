// Generated by CoffeeScript 1.9.1
(function() {
  var slice, toString;

  slice = Array.prototype.slice;

  toString = Object.prototype.toSting;

  exports.on = function(name, callback, context) {
    var channel, channels, error;
    try {
      channels = this.channels || (this.channels = {});
      channel = channels[name] || (chanels[name] = []);
      channel.push({
        callback: callback,
        context: context || this
      });
    } catch (_error) {
      error = _error;
      console.log(error);
    }
    return this;
  };

  exports.off = function(name, callback, context) {
    var channel, channels, e, error, i, index, len;
    try {
      channels = this.channels || (this.channels = {});
      channel = channels[name] || (channels[name] = []);
      if (channel) {
        for (index = i = 0, len = channel.length; i < len; index = ++i) {
          e = channel[index];
          if (e.callback === callback) {
            channel.splice(index, 1);
          }
        }
      }
    } catch (_error) {
      error = _error;
      console.log(error);
    }
    return this;
  };

  exports.once = function(name, callback, context) {
    var error, modified, turnOff;
    try {
      turnOff = this.off.bind(this);
      modified = function() {
        callback.apply(this, arguments);
        turnOff(name, modified);
        return null;
      };
      this.on(name, modified, context);
    } catch (_error) {
      error = _error;
      console.log(error);
    }
    return this;
  };

  exports.trigger = function(name) {
    var args, channel, channels, e, error, i, len, queue;
    try {
      args = slice.call(arguments, 1);
      channels = this.channels || (this.channels = {});
      channel = channels[name] || (channels[name] = []);
      if (channel) {
        queue = channel.slice();
        for (i = 0, len = queue.length; i < len; i++) {
          e = queue[i];
          e.callback.apply(e.context, args);
        }
      }
    } catch (_error) {
      error = _error;
      console.log(error);
    }
    return this;
  };

  exports.listen = function(obj, name, callback, context) {
    var error;
    try {
      obj.on(name, callback, context);
    } catch (_error) {
      error = _error;
      console.log(error);
    }
    return this;
  };

  exports.stopListening = function(obj, name, callback) {
    var error;
    try {
      obj.off(name, callback);
    } catch (_error) {
      error = _error;
      console.log(error);
    }
    return this;
  };

  exports.listenOnce = function(obj, name, callback, context) {
    var error, modified, stopListening;
    try {
      stopListening = this.stopListening.bind(this);
      modified = function() {
        callback.apply(this, arguments);
        return stopListening(obj, name, modified);
      };
      this.listen(obj, name, modified, context);
    } catch (_error) {
      error = _error;
      console.log(error);
    }
    return this;
  };

}).call(this);
